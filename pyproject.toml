# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/

#[build-system]
#requires = ["hatchling"]
#build-backend = "hatchling.build"

[build-system]
requires = [
    # pin NumPy version used in the build
    #"oldest-supported-numpy",
    "setuptools>=65.0.0",
]

build-backend = "setuptools.build_meta"

[project]
name = "abipy"
#dynamic = ["version"]
description = "Python package to automate ABINIT calculations and analyze the results."
readme = "README.rst"
requires-python = ">=3.10"
license = { text = "GPL" }
authors = [
    { name = "M. Giantomassi and the AbiPy group", email = "matteo.giantomassi@uclouvain.be" },
]
maintainers = [
    { name = "Matteo Giantomassi", email = "matteo.giantomassi@uclouvain.be" },
]
keywords = [
    "ABINIT",
    "ab-initio",
    "density-function-theory",
    "electronic-structure",
    "first-principles",
    "pymatgen",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "apscheduler<=3.10.4",
    "ase",
    "chart-studio",
    "click",
    "ipython",
    "matplotlib",
    "netCDF4",
    "numpy",
    "packaging",
    "pandas",
    "phonopy",
    "seekpath",
    "plotly",
    "pydispatcher>=2.0.5",
    "pymatgen",
    "monty",
    "pyyaml>=3.11",
    "scipy",
    "seaborn",
    "spglib",
    "tabulate",
    "tqdm",
]
version = "0.9.8"

[project.urls]
Homepage = "https://github.com/abinit/abipy"
Download = "https://github.com/abinit/abipy"
Documentation = "https://abinit.github.io/abipy/"
Repository = "https://github.com/abinit/abipy"
Issues = "https://github.com/abinit/abipy/issues"
Pypi = "https://pypi.org/project/abipy"

#[project.optional-dependencies]
#abinit = ["netcdf4>=1.7.2"]

#[project.scripts]
#pmg = "pymatgen.cli.pmg:main"

[tool.ruff]
line-length = 120
output-format = "concise"

[tool.hatch.build.targets.sdist]
include = [
    "/abipy",
]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Rule families
    "ANN", # flake8-annotations (not ready, require types for ALL args)
    "ARG", # Check for unused function arguments
    "BLE", # General catch of Exception
    "C90", # Check for functions with a high McCabe complexity
    "COM", # flake8-commas (conflict with line wrapper)
    "CPY", # Missing copyright notice at top of file (need preview mode)
    "EM",  # Format nice error messages
    "ERA", # Check for commented-out code
    "FIX", # Check for FIXME, TODO and other developer notes
    "G",   # Validate logging format strings
    "INP", # Ban PEP-420 implicit namespace packages
    "N",   # PEP8-naming (many var/arg names are intended)
    "PTH", # Prefer pathlib over os.path
    "SLF", # Access "private" class members
    "T20", # Check for print/pprint
    "TD",  # TODO tags related

    # Single rules
    "B023", # Function definition does not bind loop variable
    "B904", # Within an except clause, raise exceptions with ...
    "C408", # unnecessary-collection-call
    "D105", # Missing docstring in magic method
    "D205", # One blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function
    "PD011", # (A lot of false positive on non-Pandas objects)
    "PERF203", # Use of try-except in for/while loop
    "PERF401", # Replace "for" loops with list comprehension
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR1702", # Too many nested blocks
    "PLR2004", # Magic-value-comparison TODO: fix these
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PT013", # Incorrect import of pytest
    "S110", # Log for try-except-pass
    "S112", # Log for try-except-continue
    "S311", # Use random module for cryptographic purposes
    "S314", # Replace xml with defusedxml to avoid XML attacks
    "S603", # Check source for use of "subprocess" call
    "S607", # Start process with relative path
    "SIM105", # Use contextlib.suppress() instead of try-except-pass
    "SIM905", # Split static strings
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY300", # Check for return statements in try blocks
    "TRY301", # Check for raise statements within try blocks
]
pydocstyle.convention = "google"
#isort.required-imports = ["from __future__ import annotations"]
#isort.split-on-trailing-comma = false
#isort.known-first-party = ["pymatgen"]
#
#[tool.ruff.format]
#docstring-code-format = true
#
#[tool.ruff.lint.per-file-ignores]
#"__init__.py" = ["F401"] # unused-import
#"tests/**" = [
#    "ANN201", # missing-return-type-undocumented-public-function
#    "D", # pydocstyle
#    "PLR0124", # comparison-with-itself
#    "PLR2004", # magic-value-comparison
#    "PLR6301", # no-self-use
#    "S101", # Use of "assert"
#]

#[tool.pytest.ini_options]
#addopts = "--durations=30 --quiet -r xXs --color=yes --import-mode=importlib"
#filterwarnings = [
#    # NOTE: the LAST matching option would be used
#    "ignore::UserWarning", # Ignore UserWarning
#    "error:We strongly encourage explicit `encoding`:EncodingWarning", # Mark `zopen` EncodingWarning as error
#    "error:We strongly discourage using implicit binary/text:FutureWarning", # Mark `zopen` FutureWarning as error
#    # TODO: remove the following filter once `monty.io` dropped custom EncodingWarning
#    "error:We strongly encourage explicit `encoding`:monty.io.EncodingWarning",
#    # TODO: pybtex (perhaps some others) emits the following warnings
#    'ignore:pkg_resources is deprecated as an API:DeprecationWarning',
#    'ignore:distutils Version classes are deprecated:DeprecationWarning',
#    'ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning',
#]


[tool.mypy]
ignore_missing_imports = true
namespace_packages = true
no_implicit_optional = false
disable_error_code = ["annotation-unchecked", "override", "operator", "attr-defined", "union-attr", "misc", "call-overload", "call-arg"] #, "operator", "arg-type", "index", "call-arg", "return-value", "assignment", "attr-defined"]
#exclude = ['src/pymatgen/analysis', 'src/pymatgen/io', 'src/pymatgen/cli', 'src/pymatgen/phonon']
#plugins = ["numpy.typing.mypy_plugin"]


#[tool.codespell]
## TODO: un-ignore "ist/nd/ot/ontop/CoO" once support file-level ignore with pattern
#ignore-words-list = """Nd, Te, titel, Mater,
#Hart, Lew, Rute, atomate,
#ist, nd, ot, ontop, CoO
#"""
## TODO: un-skip lammps/test_inputs.py once support block ignore with pattern
#skip = """*.json,
#src/pymatgen/analysis/chemenv/coordination_environments/coordination_geometries_files/allcg.txt,
#src/pymatgen/entries/MPCompatibility.yaml,
#tests/io/lammps/test_inputs.py,
#"""
#check-filenames = true
