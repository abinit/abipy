"""Tests for xsf module"""
import tempfile
import numpy as np
import abipy.data as abidata

from abipy.core.testing import AbipyTest
from abipy.iotools.xsf import *


class TestXsfUtils(AbipyTest):
    """Unit tests for Density."""

    def setUp(self):
        self.mgb2 = abidata.structure_from_ucell("MgB2")

    def test_xsf_write_structure(self):
        """Testing crystalline structures in the XSF format."""
        tmp_file = tempfile.TemporaryFile(mode="w+")

        xsf_write_structure(tmp_file, self.mgb2)

        xsf_string = \
"""CRYSTAL
# Primitive lattice vectors in Angstrom
PRIMVEC 1
 2.67255439607878 1.54300000000000 0.00000000000000
 -2.67255439607878 1.54300000000000 0.00000000000000
 0.00000000000000 0.00000000000000 3.52300000000000
# Cartesian coordinates in Angstrom.
PRIMCOORD 1
 3 1
 12     0.00000000000000     0.00000000000000     0.00000000000000
  5    -0.89085146535959     1.54300000000000     1.76150000000000
  5     0.89085146535959     1.54300000000000     1.76150000000000
"""
        tmp_file.seek(0)
        self.assertMultiLineEqual(tmp_file.read(), xsf_string)
        tmp_file.close()

    def test_xsf_write_data(self):
        """Testing XSF file with datasets."""
        # 2 x 3 x 2 grid without pbc stored in fortran mode.
        data = np.reshape(np.arange(12), (2,3,2)).T
        tmp_file = tempfile.TemporaryFile(mode="w+")
        xsf_write_data(tmp_file, self.mgb2, data, add_replicas=True)

        xsf_string = \
"""BEGIN_BLOCK_DATAGRID_3D
 data
 BEGIN_DATAGRID_3Dgrid#1
3 4 3
0.000000 0.000000 0.000000
2.672554 1.543000 0.000000
-2.672554 1.543000 0.000000
0.000000 0.000000 3.523000
0.000000 1.000000 0.000000
2.000000 3.000000 2.000000
4.000000 5.000000 4.000000
0.000000 1.000000 0.000000

6.000000 7.000000 6.000000
8.000000 9.000000 8.000000
10.000000 11.000000 10.000000
6.000000 7.000000 6.000000

0.000000 1.000000 0.000000
2.000000 3.000000 2.000000
4.000000 5.000000 4.000000
0.000000 1.000000 0.000000

 END_DATAGRID_3D
END_BLOCK_DATAGRID_3D
"""
        tmp_file.seek(0)
        self.assertMultiLineEqual(tmp_file.read(), xsf_string)

        # Complex array will raise TypeError since we should specify the type.
        cplx_data = np.array(data, dtype=np.complex)

        # cplx_mode must be specified when data is a complex array
        with self.assertRaises(TypeError):
            xsf_write_data(tmp_file, self.mgb2, cplx_data)

        tmp_file.seek(0)
        xsf_write_data(tmp_file, self.mgb2, cplx_data, cplx_mode="re")
        tmp_file.seek(0)
        self.assertMultiLineEqual(tmp_file.read(), xsf_string)

        tmp_file.seek(0)
        xsf_write_data(tmp_file, self.mgb2, cplx_data, cplx_mode="im", add_replicas=True)

        tmp_file.seek(0)
        xsf_write_data(tmp_file, self.mgb2, cplx_data, cplx_mode="abs", add_replicas=True)

        tmp_file.seek(0)
        with self.assertRaises(ValueError):
            xsf_write_data(tmp_file, self.mgb2, cplx_data, cplx_mode="foobar", add_replicas=True)

        tmp_file.close()

    def test_bxsf_write(self):
        tmp_file = tempfile.TemporaryFile(mode="w+")

        nsppol, nband, ndivs, fermie = 1, 2, (2,2,2), 0.0
        energies = np.arange(nsppol * nband * np.product(ndivs))
        bxsf_write(tmp_file, self.mgb2, nsppol, nband, ndivs, energies, fermie, unit="Ha")

        xsf_string = \
"""BEGIN_INFO
# Band-XCRYSDEN-Structure-File for Visualization of Fermi Surface generated by the ABINIT package
# NOTE: the first band is relative to spin-up electrons,
#       the second band to spin-down electrons (if any) and so on ...
#
# Launch as: xcrysden --bxsf
#
 Fermi Energy: 0.000000
END_INFO

BEGIN_BLOCK_BANDGRID_3D
 band_energies
 BEGIN_BANDGRID_3D
2
2 2 2
0 0 0
1.175502 2.036029 0.000000
-1.175502 2.036029 0.000000
0.000000 0.000000 1.783476
 BAND: 1
0.000000000000000000e+00
1.000000000000000000e+00
2.000000000000000000e+00
3.000000000000000000e+00
4.000000000000000000e+00
5.000000000000000000e+00
6.000000000000000000e+00
7.000000000000000000e+00
 BAND: 2
8.000000000000000000e+00
9.000000000000000000e+00
1.000000000000000000e+01
1.100000000000000000e+01
1.200000000000000000e+01
1.300000000000000000e+01
1.400000000000000000e+01
1.500000000000000000e+01
 END_BANDGRID_3D
END_BLOCK_BANDGRID_3D
"""
        tmp_file.seek(0)
        s = tmp_file.read()
        print(s)
        print(xsf_string)
        self.maxDiff = None
        self.assertMultiLineEqual(s, xsf_string)
        tmp_file.close()
